connect system/manager as sysdba

DROP USER test CASCADE;
CREATE USER test IDENTIFIED BY test;
GRANT DBA TO test;

connect test/test;

SET SERVEROUTPUT ON;

--OBJETO Y UBICACION
CREATE OR REPLACE TYPE UBICACION_TYP AS OBJECT (
    CALLE   INTEGER,    -- CALLE EN LA QUE SE ENCUENTRA
    AV1     INTEGER,    -- ENTRE AV1
    AV2     INTEGER,    -- Y AV2
    POS     INTEGER     -- POSICION (1, 2, 3)
)
/

--OBJETO Y TABLA TOMA
CREATE OR REPLACE TYPE TOMA_TYP AS OBJECT (
    TAMANNO INTEGER     -- PULGADAS 
)
/

CREATE OR REPLACE TYPE COLLECTION_TOMAS IS TABLE OF TOMA_TYP;
/

-- DD: DECIMAL DEGREES
-- ESTO YA TIENE UN CONSTRUCTOR POR DEFAULT QUE ES "GRADO_TYP(GRADOS, MINUTOS, SEGUNDOS)"
CREATE OR REPLACE TYPE GRADO_TYP AS OBJECT (
    GRADOS      INTEGER,
    MINUTOS     INTEGER,
    SEGUNDOS    FLOAT,
    CONSTRUCTOR FUNCTION    GRADO_TYP (DD FLOAT) RETURN SELF AS RESULT,
    MEMBER      FUNCTION    TO_DD     RETURN FLOAT,
    MEMBER      FUNCTION    TO_STRING RETURN VARCHAR2
);
/

CREATE OR REPLACE TYPE BODY GRADO_TYP IS
    CONSTRUCTOR FUNCTION GRADO_TYP (DD FLOAT) 
    RETURN SELF AS RESULT IS
    BEGIN 
        SELF.GRADOS := FLOOR(DD);
        SELF.MINUTOS := FLOOR( (DD - SELF.GRADOS) * 60 );
        SELF.SEGUNDOS := ( DD - SELF.GRADOS - SELF.MINUTOS / 60 ) * 3600;
        RETURN;
    END;

    MEMBER FUNCTION TO_DD 
    RETURN FLOAT IS 
        DD FLOAT;
    BEGIN 
        DD := SELF.GRADOS + (SELF.MINUTOS / 60) + (SELF.SEGUNDOS / 3600);
        RETURN DD;
    END;

    MEMBER FUNCTION TO_STRING
    RETURN VARCHAR2 IS
        STR VARCHAR2(100);
    BEGIN
        STR := SELF.GRADOS || '° ' || SELF.MINUTOS || ''' ' || SELF.SEGUNDOS || '"';
        RETURN STR;
    END;

END;
/


--  NO SE CUAL ES EL FORMATO QUE QUIERE UTILIZAR EL PROFE, YA LE PREGUNTÉ
-- AL ASISTENTE, PERO ME DICE QUE SEGURO ES DEL FORMATO DMS (DEGREES, MINUTES, SECONDS)
CREATE OR REPLACE TYPE GPS_TYP AS OBJECT (
    LAT FLOAT,  -- LAT: DECIMAL DEGREES:    9.97089
    LNG FLOAT   -- LNG: DECIMAL DEGREES:  -87.1290535
)
/

CREATE OR REPLACE TYPE CAUDAL_TYP AS OBJECT (
    -- CAUDAL = LITROS / SEGUNDOS.
    VALOR_ESPERADO  INTEGER,
    VALOR_REAL      INTEGER
)
/

CREATE OR REPLACE TYPE HIDRANTE_TYP AS OBJECT (
    UBIC    UBICACION_TYP,
    TOMAS   COLLECTION_TOMAS,
    CAUDAL  CAUDAL_TYP,
    GPS     GPS_TYP,
    ESTADO  INTEGER
    -- BODY
    -- MEMBER FUNCTION NAME RETURN INTEGER,
)
/

CREATE OR REPLACE TYPE HIDRANTES AS TABLE OF HIDRANTE_TYP; --UNA ESTRUCTURA CON DIA Y CANTIDAD DE CADA TIPO VENDIDO
/

CREATE OR REPLACE TYPE BOMBERO AS OBJECT(
	ID VARCHAR2(15),
	NOMBRE VARCHAR2(15),
	MEMBER PROCEDURE REGISTRARFORMULARIO
)
/

CREATE OR REPLACE TYPE CAMION AS OBJECT(
	ID VARCHAR2(15),
	MEMBER FUNCTION RPH(PUNTO_BUSQUEDA GPS_TYP,RADIO FLOAT) RETURN FLOAT
)
/

CREATE OR REPLACE FUNCTION TO_RADIANS(D FLOAT) 
RETURN FLOAT IS 
    PI CONSTANT NUMBER := 3.141592654; 
    R FLOAT;
BEGIN 
    R := D * PI / 180;
    RETURN R;
END;
/

-- TESTING DEGREES
DECLARE 
    EARTH_RADIUS INTEGER;

    LAT1 GRADO_TYP;
    LNG1 GRADO_TYP;
    DLAT FLOAT;
    FLAT1 FLOAT;

    LAT2 GRADO_TYP;
    LNG2 GRADO_TYP;
    DLNG FLOAT;
    FLAT2 FLOAT;

    A FLOAT;
    C FLOAT;

    R FLOAT;
BEGIN
    EARTH_RADIUS := 6371;

    LAT1 := GRADO_TYP(10,  0, 51.3);
    LNG1 := GRADO_TYP(84, 14, 45.7);

    LAT2 := GRADO_TYP(10,  0, 51.8);
    LNG2 := GRADO_TYP(84, 14, 34.8);

    DLAT := TO_RADIANS(LAT1.TO_DD() - LAT2.TO_DD());
    DLNG := TO_RADIANS(LNG1.TO_DD() - LNG2.TO_DD());
    DBMS_OUTPUT.PUT_LINE('LAT1 ' || LAT1.TO_DD() || ', LNG1 ' || LNG1.TO_DD() );
    DBMS_OUTPUT.PUT_LINE('LAT2 ' || LAT2.TO_DD() || ', LNG2 ' || LNG2.TO_DD() );
    DBMS_OUTPUT.PUT_LINE('DLAT ' || DLAT);
    DBMS_OUTPUT.PUT_LINE('DLNG ' || DLNG);


    FLAT1 := TO_RADIANS(LAT1.TO_DD());
    FLAT2 := TO_RADIANS(LAT2.TO_DD());

    A := SIN(DLAT / 2) * SIN(DLNG / 2) + SIN(DLNG /2) * SIN(DLNG / 2) * COS(FLAT1) * COS(FLAT2);
    C := 2 * ATAN2(SQRT(A), SQRT(1 - A));

    R := EARTH_RADIUS * C;

    DBMS_OUTPUT.PUT_LINE('DISTANCE IS ' || R || 'KMS');

END;
/

CREATE OR REPLACE PROCEDURE TEST IS
	H HIDRANTE_TYP;
	HIDRANTESARRAY HIDRANTES;
	TOMS COLLECTION_TOMAS;
BEGIN
	HIDRANTESARRAY := HIDRANTES();
	HIDRANTESARRAY.EXTEND(10);
	TOMS := COLLECTION_TOMAS();
	TOMS.EXTEND(4);
	TOMS(1) := TOMA_TYP(1);
	H := HIDRANTE_TYP(UBICACION_TYP(10,9,10,3),TOMS,CAUDAL_TYP(20,5),GPS_TYP(9.993807,-84.161394),1);
	HIDRANTESARRAY(1):= H;
	H := HIDRANTE_TYP(UBICACION_TYP(15,5,1,4),TOMS,CAUDAL_TYP(20,5),GPS_TYP(9.99342,-84.16231),1);
	HIDRANTESARRAY(2):= H;
END;
/